generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model navLogo {
  id   Int    @id @default(autoincrement())
  text String
}

model Usert {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  username     String          @unique
  password     String
  userRole     String
  authorName   String
  authorDetail String?
  authorImage  String?
  blocked      String?
  blogslive    Bloglivet[]     @relation("UserToBloglivet")
  blogs        Blogt[]         @relation("UserToBlogt")
  topics       TutorialTopic[] @relation("UserToTopic")
}

model Blogt {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  slug           String
  content        String?
  image          String?
  published      String     @default("pending")
  publishDate    DateTime
  scheduledAt    DateTime?
  delete_request String?
  createdAt      DateTime   @default(now())
  author_id      Int
  bloglive_id    Int?
  featuredpost   String
  category_id    Int
  author         Usert      @relation("UserToBlogt", fields: [author_id], references: [id])
  bloglive       Bloglivet? @relation("BlogtToBloglivet", fields: [bloglive_id], references: [id])
  category       Category   @relation("BlogCategory", fields: [category_id], references: [id])
}

model Bloglivet {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  slug           String
  content        String?
  image          String?
  published      String
  publishDate    DateTime
  createdAt      DateTime @default(now())
  author_id      Int
  featuredpost   String
  category_id    Int
  delete_request String?
  author         Usert    @relation("UserToBloglivet", fields: [author_id], references: [id])
  category       Category @relation("BlogLiveCategory", fields: [category_id], references: [id])
  blogt          Blogt[]  @relation("BlogtToBloglivet")
}

model Favicont {
  id    Int     @id @default(autoincrement())
  image String?
}

model TutorialTopic {
  id            Int                    @id @default(autoincrement())
  title         String                 @db.VarChar(255)
  slug          String?
  is_active     String
  author_id     Int
  subtopics     TutorialSubtopic[]     @relation("TopicToSubTopic")
  subtopicslive TutorialSubtopicLive[] @relation("TopicToSubTopicLive")
  author        Usert                  @relation("UserToTopic", fields: [author_id], references: [id])
}

model TutorialSubtopic {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  content         String?
  slug            String?
  published       String?
  preference      Int
  topic_id        Int
  delete_request  String?
  createdAt       DateTime      @default(now())
  subtopiclive_id Int?
  topic           TutorialTopic @relation("TopicToSubTopic", fields: [topic_id], references: [id])
}

model TutorialSubtopicLive {
  id             Int           @id @default(autoincrement())
  title          String
  description    String?
  content        String?
  slug           String?
  published      String?
  preference     Int
  topic_id       Int
  delete_request String?
  createdAt      DateTime      @default(now())
  topic          TutorialTopic @relation("TopicToSubTopicLive", fields: [topic_id], references: [id])
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  title       String
  description String
  slug        String      @unique
  isActive    Boolean     @default(true)
  blogslive   Bloglivet[] @relation("BlogLiveCategory")
  blogs       Blogt[]     @relation("BlogCategory")
}

model Footer {
  id       Int     @id @default(autoincrement())
  name     String
  slug     String  @unique
  isActive Boolean
}

model SocialMedia {
  id       Int     @id @default(autoincrement())
  name     String
  link     String  @unique
  icon     String?
  isActive Boolean
}

model SideImg {
  id       Int        @id @default(autoincrement())
  image    String
}